{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["renderSequences","sequences","nWeeks","Table","TableHead","TableRow","_","map","range","n","TableBody","sequence","idx","renderSequence","sendEvent","TableCell","from","name","to","id","genSequences","students","weeks","previousAssignments","student","fromPairs","value","others","reject","buildChain","sampleSize","length","chain","updated","start","todos","find","todo","console","log","App","useState","nStudents","setNStudents","setStudents","setSequences","setNWeeks","useEffect","uniqueNamesGenerator","dictionaries","names","className","TextField","type","label","inputProps","min","max","step","onChange","event","target","Number","parseInt","defaultValue","Button","variant","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUA2BA,SAASA,EAAgBC,EAA0BC,GACjD,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGC,IAAEC,IAAID,IAAEE,MAAM,EAAGN,EAAS,IAAI,SAACO,GAAD,OAC7B,4CAAaA,YAInB,cAACC,EAAA,EAAD,UACGJ,IAAEC,IAAIN,GAAW,SAACU,EAAUC,GAAX,OAChB,cAACP,EAAA,EAAD,UAA6BQ,EAAeF,IAA7B,MAAQC,WAOjC,SAASC,EAAeF,GACtB,OAAOL,IAAEC,IAAII,GAAU,SAACG,GAAD,mBACrB,cAACC,EAAA,EAAD,2BACMD,QADN,IACMA,GADN,UACMA,EAAWE,YADjB,aACM,EAAiBC,KADvB,wBAC+BH,QAD/B,IAC+BA,GAD/B,UAC+BA,EAAWI,UAD1C,aAC+B,EAAeD,QADrB,OAATH,QAAS,IAATA,GAAA,UAAAA,EAAWE,YAAX,eAAiBG,IAAK,UAAtB,OAA4BL,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAWI,UAAvC,aAA4B,EAAeC,QAK/D,SAASC,EAAaC,EAAqBC,GACzC,IAAIC,EAAsBjB,IAAEe,GACzBd,KAAI,SAACiB,GAAD,MAAa,CAACA,EAAQL,GAAI,OAC9BM,YACAC,QACH,OAAOpB,IAAEC,IAAIc,GAAU,SAACG,GACtB,IAAMG,EAASrB,IAAEsB,OAAOP,EAAU,CAAC,KAAMG,EAAQL,KADO,EAE7BU,EACzBL,EACAlB,IAAEwB,WAAWH,EAAQA,EAAOI,QAC5BR,GAHMS,EAFgD,EAEhDA,MAAOC,EAFyC,EAEzCA,QAMf,OADAV,EAAsBU,EACfD,KASX,SAASH,EACPK,EACAC,EACAZ,GAEA,GAAKY,EAAMJ,OAKJ,CACL,IAAMb,EAAKZ,IAAE8B,KAAKD,GAAO,SAACE,GAAD,OAAWd,EAAoBW,EAAMf,IAAIkB,EAAKlB,OACvE,GAAKD,EAME,CAAC,IAAD,EACsBW,EACzBX,EACAZ,IAAEsB,OAAOO,EAAO,CAAC,KAAMjB,EAAGC,KAFS,YAAC,eAI/BI,GAJ8B,kBAKhCW,EAAMf,GAL0B,YAAC,eAM7BI,EAAoBW,EAAMf,KANE,kBAO9BD,EAAGC,IAAK,OAPPa,EADH,EACGA,MAAOC,EADV,EACUA,QAWf,MAAO,CAAED,MAAM,CAAE,CAAEhB,KAAMkB,EAAOhB,GAAIA,IAAtB,mBAA+Bc,IAAQC,QAASA,GAhB9D,OADAK,QAAQC,IAAI,cACL,CACLP,MAAO,GACPC,QAASV,GAVb,MAAO,CACLS,MAAO,GACPC,QAASV,GAwGAiB,MA7Ef,WAAgB,IAAD,EACqBC,mBAvFjB,GAsFJ,mBACNC,EADM,KACKC,EADL,OAEmBF,qBAFnB,mBAENpB,EAFM,KAEIuB,EAFJ,OAGqBH,qBAHrB,mBAGNxC,EAHM,KAGK4C,EAHL,OAIeJ,mBAzFd,GAqFD,mBAINvC,EAJM,KAIE4C,EAJF,KA6Cb,OAhBAC,qBAAU,WACR,IAAM1B,EAAWf,IAAEC,IAAID,IAAEE,MAAM,EAAGkC,EAAY,IAAI,SAACjC,GACjD,MAAO,CACLU,GAAIV,EACJQ,KAAM+B,YAAqB,CAAEC,aAAc,CAACC,WAGhDN,EAAYvB,KACX,CAACqB,IAEJK,qBAAU,WACJ1B,GACFwB,EAAazB,EAAaC,EAAUf,IAAEE,MAAM,EAAGN,EAAS,OAEzD,CAACA,EAAQmB,IAELpB,EACL,sBAAKkD,UAAU,MAAf,UACE,gCACE,cAACC,EAAA,EAAD,CACEC,KAAK,SACLC,MAAM,mBACNnC,GAAG,aACHoC,WAAY,CAAEC,IAAK,IAAKC,IAAK,KAAMC,KAAM,KACzCC,SA/CR,SAAgCC,GAAa,IAAD,GAEnC,OAALA,QAAK,IAALA,GAAA,UAAAA,EAAOC,cAAP,eAAenC,QACfoC,OAAOC,SAASH,EAAMC,OAAOnC,SAAWgB,GAExCC,EAAamB,OAAOC,SAASH,EAAMC,OAAOnC,SA2CtCsC,aA5IS,IA8IX,cAACZ,EAAA,EAAD,CACEC,KAAK,SACLC,MAAM,eACNnC,GAAG,UACHoC,WAAY,CAAEC,IAAK,IAAKC,IAAK,KAAMC,KAAM,KACzCC,SA/CR,SAA6BC,GAAa,IAAD,GAEhC,OAALA,QAAK,IAALA,GAAA,UAAAA,EAAOC,cAAP,eAAenC,QACfoC,OAAOC,SAASH,EAAMC,OAAOnC,SAAWxB,GAExC4C,EAAUgB,OAAOC,SAASH,EAAMC,OAAOnC,SA2CnCsC,aAnJM,OAsJV,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QA3ClD,WACM/C,GACFwB,EAAazB,EAAaC,EAAUf,IAAEE,MAAM,EAAGN,EAAS,MAyCtD,qBAGCF,EAAgBC,EAAWC,SAIhC,8BCzKWmE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33ddadd7.chunk.js","sourcesContent":["import {\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { names, uniqueNamesGenerator } from \"unique-names-generator\";\nimport \"./App.css\";\n\ntype Student = {\n  id: number;\n  name: string;\n};\n\ntype SendEvent = {\n  from: Student;\n  to: Student;\n};\n\nconst N_STUDENTS = 7;\nconst N_WEEKS = 6;\n\nfunction renderSequences(sequences: SendEvent[][], nWeeks: number) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          {_.map(_.range(1, nWeeks + 1), (n) => (\n            <th>{`Week ${n}`}</th>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {_.map(sequences, (sequence, idx) => (\n          <TableRow key={\"seq\" + idx}>{renderSequence(sequence)}</TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction renderSequence(sequence: SendEvent[]) {\n  return _.map(sequence, (sendEvent: SendEvent) => (\n    <TableCell key={sendEvent?.from?.id + \"→\" + sendEvent?.to?.id}>\n      {`${sendEvent?.from?.name}→${sendEvent?.to?.name}`}\n    </TableCell>\n  ));\n}\nfunction genSequences(students: Student[], weeks: number[]): SendEvent[][] {\n  let previousAssignments = _(students)\n    .map((student) => [student.id, {}])\n    .fromPairs()\n    .value();\n  return _.map(students, (student: Student): SendEvent[] => {\n    const others = _.reject(students, [\"id\", student.id]);\n    const { chain, updated } = buildChain(\n      student,\n      _.sampleSize(others, others.length),\n      previousAssignments\n    );\n    previousAssignments = updated;\n    return chain;\n  });\n}\n\ntype ChainResponse = {\n  chain: SendEvent[];\n  updated: Record<number, Record<number, boolean>>;\n};\n\nfunction buildChain(\n  start: Student,\n  todos: Student[],\n  previousAssignments: Record<number, Record<number, boolean>>\n): ChainResponse {\n  if (!todos.length) {\n    return {\n      chain: [],\n      updated: previousAssignments,\n    };\n  } else {\n    const to = _.find(todos, (todo) => !previousAssignments[start.id][todo.id]);\n    if (!to) {\n      console.log(\"impossible\");\n      return {\n        chain: [],\n        updated: previousAssignments,\n      };\n    } else {\n      const { chain, updated } = buildChain(\n        to,\n        _.reject(todos, [\"id\", to.id]),\n        {\n          ...previousAssignments,\n          [start.id]: {\n            ...previousAssignments[start.id],\n            [to.id]: true,\n          },\n        }\n      );\n      return { chain: [{ from: start, to: to }, ...chain], updated: updated };\n    }\n  }\n}\n\nfunction App() {\n  const [nStudents, setNStudents] = useState(N_STUDENTS);\n  const [students, setStudents] = useState<Student[]>();\n  const [sequences, setSequences] = useState<SendEvent[][]>();\n  const [nWeeks, setNWeeks] = useState(N_WEEKS);\n\n  function handleNStudentsChanged(event: any) {\n    if (\n      event?.target?.value &&\n      Number.parseInt(event.target.value) !== nStudents\n    ) {\n      setNStudents(Number.parseInt(event.target.value));\n    }\n  }\n  function handleNWeeksChanged(event: any) {\n    if (\n      event?.target?.value &&\n      Number.parseInt(event.target.value) !== nWeeks\n    ) {\n      setNWeeks(Number.parseInt(event.target.value));\n    }\n  }\n\n  function handleRegenclick() {\n    if (students) {\n      setSequences(genSequences(students, _.range(1, nWeeks + 1)));\n    }\n  }\n\n  useEffect(() => {\n    const students = _.map(_.range(1, nStudents + 1), (n) => {\n      return {\n        id: n,\n        name: uniqueNamesGenerator({ dictionaries: [names] }),\n      };\n    });\n    setStudents(students);\n  }, [nStudents]);\n\n  useEffect(() => {\n    if (students) {\n      setSequences(genSequences(students, _.range(1, nWeeks + 1)));\n    }\n  }, [nWeeks, students]);\n\n  return sequences ? (\n    <div className=\"App\">\n      <div>\n        <TextField\n          type=\"number\"\n          label=\"Aantal studenten\"\n          id=\"n-students\"\n          inputProps={{ min: \"0\", max: \"10\", step: \"1\" }}\n          onChange={handleNStudentsChanged}\n          defaultValue={N_STUDENTS}\n        />\n        <TextField\n          type=\"number\"\n          label=\"Aantal weken\"\n          id=\"n-weeks\"\n          inputProps={{ min: \"0\", max: \"10\", step: \"1\" }}\n          onChange={handleNWeeksChanged}\n          defaultValue={N_WEEKS}\n        />\n      </div>\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleRegenclick}>\n          Opnieuw\n        </Button>\n        {renderSequences(sequences, nWeeks)}\n      </div>\n    </div>\n  ) : (\n    <></>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}